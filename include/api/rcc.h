#ifndef RCC_H
#define RCC_H

#include "stdint.h"

#define RCC ((struct rcc *)0x58024400) 

enum pll_id {PLL1, PLL2, PLL3};

#define hsi_ck 0b0
#define csi_ck 0b1
#define hse_ck 0b10
#define pll1_ck 0b11

typedef struct rcc_clock_cfgr {
        uint32_t system_clock_selection;
} rcc_clock_cfgr; 

/*
 * RCC struct with all RCC registers
 */
struct rcc {
    volatile uint32_t RCC_CR, RCC_ICSCR, RCC_HSICFGR, RCC_CRRCR, RESERVED, RCC_CSICFGR, RCC_CFGR, RESERVED2, RCC_D1CFGR, RCC_D2CFGR, RCC_D3CFGR, RESERVED3, RCC_PLLCKSELR, RCC_PLLCFGR, RCC_PLL1DIVR, RCC_PLL1FRACR, RCC_PLL2DIVR, RCC_PLL2FRACR, RCC_PLL3DIVR, RCC_PLL3FRACR, RESERVED4, RCC_D1CCIPR, RCC_D2CCIP1R, RCC_D2CCIP2R, RCC_D3CCIPR, RESERVED5, RCC_CIER, RCC_CIFR, RCC_CICR, RESERVED6, RCC_BDCR, RCC_CSR, RESERVED7, RCC_AHB3RSTR, RCC_AHB1RSTR, RCC_AHB2RSTR, RCC_AHB4RSTR, RCC_APB3RSTR, RCC_APB1LRSTR, RCC_APB1HRSTR, RCC_APB2RSTR, RCC_APB4RSTR, RCC_GCR, RCC_D3AMR, RESERVED8[8], RCC_RSR, RCC_AHB3ENR, RCC_AHB1ENR, RCC_AHB2ENR, RCC_AHB4ENR, RCC_APB3ENR, RCC_APB1LENR, RCC_APB1HENR, RCC_APB2ENR, RCC_APB4ENR, RESERVED9, RCC_AHB3LPENR, RCC_AHB1LPENR, RCC_AHB2LPENR, RCC_AHB4LPENR, RCC_APB3LPENR, RCC_APB1LLPENR, RCC_APB1HLPENR, RCC_APB2LPENR, RCC_APB4LPENR, RESERVED10[4], RCC_C1_AHB3ENR, RCC_C1_AHB1ENR, RCC_C1_AHB2ENR, RCC_C1_AHB4ENR, RCC_C1_APB3ENR, RCC_C1_APB1LENR, RCC_C1_APB1HENR, RCC_C1_APB2ENR, RCC_C1_APB4ENR, RESERVED11, RCC_C1_AHB3LPENR, RCC_C1_AHB1LPENR, RCC_C1_AHB2LPENR, RCC_C1_AHB4LPENR, RCC_C1_APB3LPENR, RCC_C1_APB1LLPENR, RCC_C1_APB1HLPENR, RCC_C1_APB2LPENR, RCC_C1_APB4LPENR, RESERVED12[31];
};

int rcc_uart_init(int uart);
void enable_pll(int pll);
int system_clk(rcc_clock_cfgr config);

#endif
